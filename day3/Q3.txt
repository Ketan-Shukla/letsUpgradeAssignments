There are 8 basic data types in JavaScript.

number:  for numbers of any kind: integer or floating-point, integers are limited by ±253.
The number type represents both integer and floating point numbers.
There are many operations for numbers, e.g. multiplication *, division /, addition +, subtraction -, and so on.
Besides regular numbers, there are so-called “special numeric values” which also belong to this data type: Infinity, -Infinity and NaN.

bigint: is for integer numbers of arbitrary length.In JavaScript, the “number” type cannot represent integer values larger than (253-1) 
(that’s 9007199254740991), or less than -(-253-1) for negatives. It’s a technical limitation caused by their internal representation.
For most purposes that’s quite enough, but sometimes we need really big numbers, e.g. for cryptography or microsecond-precision timestamps
BigInt type was recently added to the language to represent integers of arbitrar length.
A BigInt value is created by appending n to the end of an integer:

string: for strings. A string may have zero or more characters, there’s no separate single-character type.In JavaScript, there are 3 types of quotes.
Double quotes: "Hello".
Single quotes: 'Hello'.
Backticks: `Hello`.
Double and single quotes are “simple” quotes. There’s practically no difference between them in JavaScript.
Backticks are “extended functionality” quotes. They allow us to embed variables and expressions into a string by wrapping them in ${…},

boolean: for true/false. This type is commonly used to store yes/no values: true means “yes, correct”, and false means “no, incorrect”.

null: for unknown values – a standalone type that has a single value null. The special null value does not belong to any of the types described above.
It forms a separate type of its own which contains only the null value:
let age = null;
In JavaScript, null is not a “reference to a non-existing object” or a “null pointer” like in some other languages.
It’s just a special value which represents “nothing”, “empty” or “value unknown”.
The code above states that age is unknown.

undefined: for unassigned values – a standalone type that has a single value undefined.The special value undefined also stands apart. 
It makes a type of its own, just like null.
The meaning of undefined is “value is not assigned”.
If a variable is declared, but not assigned, then its value is undefined

object: for more complex data structures. The object type is special.
All other types are called “primitive” because their values can contain only a single thing (be it a string or a number or whatever). In contrast, objects are used to store collections of data and more complex entities.
Being that important, objects deserve a special treatment. We’ll deal with them later in the chapter Objects, after we learn more about primitives.
The symbol type is used to create unique identifiers for objects. We have to mention it here for the sake of completeness, but also postpone the de
tails till we know objects.

symbol: for unique identifiers.
The typeof operator allows us to see which type is stored in a variable.

Two forms: typeof x or typeof(x).
Returns a string with the name of the type, like "string".
For null returns "object" – this is an error in the language, it’s not actually an object.
I